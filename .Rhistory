gitbook_dependency(table_css)
bookdown::gitbook_dependency(table_css)
library(rmarkdown)
rmarkdown::pandoc_version()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc()
library(bslib)
install.packages("remotes")
remotes::install_github("rstudio/bslib")
install.packages("downlit")
remotes::install_github("rstudio/bookdown")
remotes::install_github("rstudio/bookdown")
remotes::install_github("rstudio/bookdown",  force = TRUE)
devtools::install_github('rstudio/bookdown@bs4-book-encoding', force = TRUE)
install.packages("devtools")
devtools::install_github('rstudio/bookdown@bs4-book-encoding', force = TRUE)
devtools::install_github('rstudio/tufte')
library(tufte)
devtools::install_github('rstudio/bookdown')
.libPaths()
library(usethis)
library(roxygen2)
file.create('docs/.nojekyll')
getwd()
meta_common <- ebookdown::metadata_common()
meta_common[["title"]]
meta_common[["author"]]
meta_common <- ebookdown::metadata_common()
meta_common[["author"]]
library(ebookdown)
meta_common <- ebookdown::metadata_common()
meta_common[["author"]]
meta_common <- ebookdown::metadata_common()
meta_common[["author"]]
meta_common <- ebookdown::metadata_common()
meta_common[["author"]]
tinytex::uninstall_tinytex()
remotes::install_github('rstudio/bookdown')
n <- 23;
p <- 1;
for(i in 1:n) {
p=total*((366-i)/365)
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %f", n, 1-p)
}
n <- 23;
p <- 1;
for(i in 1:n) {
p=p*((366-i)/365)
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %f", n, 1-p)
}
n <- 23;
p <- 1;
for(i in 1:n) {
p=p*((366-i)/365)
}
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %f", n, 1-p)
n <- 23;
p <- 1;
for(i in 1:n) {
p=p*((366-i)/365)
}
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %f", n, round(1-p,4))
n <- 23;
p <- 1;
for(i in 1:n) {
p=p*((366-i)/365)
}
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %f", n, round(1-p,4))
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %#.2f", n, 1-p)
sprintf("La probabilidad de que entre %d personas 2 cumplan años el mismo día es %#.4f", n, 1-p)
n <- 23;
p <- 1;
for(i in 1:n) {
p <- p*((366-i)/365)
}
sprintf("La probabilidad de que entre %d personas al menos dos cumplan años el mismo día es %#.4f", n, 1-p)
p
1-p
round(1-p,4)
factorial(365)/(factorial(365-23)*365^23)
factorial(365)/(factorial(365-m)*365^m)
m <- 3
factorial(365)/(factorial(365-m)*365^m)
factorial(365)
n <- 23;
p <- 1;
for(i in 1:n) {
p <- p*((366-i)/365)
}
round(p,4)
n <- 23;
p <- 1;
for(i in 1:n) {
p <- p*((366-i)/365)
}
round(1-p,4)
n <- 50;
n <- 50;
source("~/.active-rstudio-document")
n <- 50;
p <- 1;
for(i in 1:n) {
p <- p*((366-i)/365)
}
round(1-p,4)
#sprintf("La probabilidad de que entre %d personas al menos dos cumplan años el mismo día es %#.4f", n, 1-p)
n <- 70;
p <- 1;
for(i in 1:n) {
p <- p*((366-i)/365)
}
round(1-p,4)
install.packages("tidyverse")
library(tidiverse)
library(tidyverse)
install.packages("cowplot")
install.packages(png)
install.packages("png")
library("grid")
remotes::install_github('yihui/formatR')
install.packages("rmarkdown")
install.packages("knitr")
install.packages("bookdown")
mtcars
boot_samp <- rsample::bootstraps(mtcars, times = 3)
install.packages("rsample")
boot_samp <- rsample::bootstraps(mtcars, times = 3)
boot_samp
#> # Bootstrap sampling
#> # A tibble: 3 × 2
#>   splits          id
#>   <list>          <chr>
#> 1 <split [32/11]> Bootstrap1
#> 2 <split [32/11]> Bootstrap2
#> 3 <split [32/12]> Bootstrap3
class(boot_samp)
small_mtcars <-
mtcars %>%
arrange(gear) %>%
slice(1:10)
library("magrittr")
small_mtcars <-
mtcars %>%
arrange(gear) %>%
slice(1:10)
small_mtcars <-
mtcars %>%
arrange(gear) %>%
dplyr::slice(1:10)
small_mtcars <-
mtcars %>%
dplyr::arrange(gear) %>%
dplyr::slice(1:10)
small_mtcars
small_mtcars <-
mtcars |>
dplyr::arrange(gear) |>
dplyr::slice(1:10)
small_mtcars
small_mtcars <-
mtcars |>
dplyr::arrange(., gear) |>
dplyr::slice(., 1:10)
small_mtcars <-
mtcars %>%
dplyr::arrange(., gear) %>%
dplyr::slice(., 1:10)
small_mtcars
tbbl <- tibble(`variable 1` = 1:2, two = 3:4)
tbbl
library(tibble)
tbbl <- tibble(`variable 1` = 1:2, two = 3:4)
tbbl
tibble
tbbl <- tibble::tibble(`variable 1` = 1:2, two = 3:4)
tbbl
url <- "http://bit.ly/raw-train-data-csv"
all_stations <-
# Step 1: Read in the data.
read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
mutate(date = mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
group_by(date, station) %>%
summarize(rides = max(rides), .groups = "drop")
all_stations <-
# Step 1: Read in the data.
readr::read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
dplyr::mutate(date = lubridate::mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
dplyr::group_by(date, station) %>%
dplyr::summarize(rides = max(rides), .groups = "drop")
library(readr)
install.packages("readr")
all_stations <-
# Step 1: Read in the data.
readr::read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
dplyr::mutate(date = lubridate::mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
dplyr::group_by(date, station) %>%
dplyr::summarize(rides = max(rides), .groups = "drop")
install.packages("lubridate")
url <- "http://bit.ly/raw-train-data-csv"
all_stations <-
# Step 1: Read in the data.
readr::read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
dplyr::mutate(date = lubridate::mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
dplyr::group_by(date, station) %>%
dplyr::summarize(rides = max(rides), .groups = "drop")
all_stations
install.packages("curl")
url <- "http://bit.ly/raw-train-data-csv"
all_stations <-
# Step 1: Read in the data.
readr::read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
dplyr::mutate(date = lubridate::mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
dplyr::group_by(date, station) %>%
dplyr::summarize(rides = max(rides), .groups = "drop")
all_stations
data(crickets, package = "modeldata")
install.packages("modeldata")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
library(ggplot2)
install.packages("ggplot2")
names(crickets)
library(modeldata)
names(crickets)
names(crickets)
data(crickets, package = "modeldata")
names(crickets)
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
library(ggplot2)
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, pch = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, pch = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, lty = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, lty = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
# Plot the temperature on the x-axis, the chirp rate on the y-axis. The plot
# elements will be colored differently for each species:
ggplot(crickets,
aes(x = temp, y = rate, color = species)
# aes(x = temp, y = rate, color = species, pch = species, lty = species)
) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets)
# To print a short summary of the model:
interaction_fit
plot(interaction_fit)
summary(interaction_fit)
# Fit a reduced model:
main_effect_fit <-  lm(rate ~ temp + species, data = crickets)
# Fit a reduced model:
main_effect_fit <-  lm(rate ~ temp + species, data = crickets)
# Compare the two:
anova(main_effect_fit, interaction_fit)
